# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: "0 22 * * *"  # Runs at 22:00 UTC every day

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Runs a single command using the runners shell
    - name: Build
      run: |
        docker build raspberry_pi -t vineyard_rpi
        docker run -v $(pwd):/mnt vineyard_rpi sh -c "cp *.tar.gz /mnt"

    - name: Upload binaries
      uses: actions/upload-artifact@v2
      with:
        name: openvino_debian10_armhf
        path: |
          openvino_debian10_armhf.tar.gz
          opencv_debian10_armhf_tests.tar.gz
  test:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: openvino_debian10_armhf

      - name: Unpack
        run: |
          tar -xf openvino_debian10_armhf.tar.gz
          tar -xf opencv_debian10_armhf_tests.tar.gz

      - name: Synchronize test data
        run: |
          cd $HOME/opencv_extra

      # Type "ulimit -s unlimited" to solve "Resource temporarily unavailable"
      - name: Run tests
        run: |
          export OPENCV_TEST_DATA_PATH=$HOME/opencv_extra/testdata
          export OPENCV_DNN_TEST_DATA_PATH=$HOME/opencv_extra/testdata
          source openvino_debian10_armhf/bin/setupvars.sh
          cd opencv/build
          ulimit -s unlimited
          ./bin/opencv_test_dnn --gtest_param_filter=*MYRIAD*
